{{if .ProtoFile.JavaPackage}}package {{.ProtoFile.JavaPackage}};
{{end}}
public class {{.JavaOuterClassName}} {
  {{range .ProtoFile.Services}}
  public interface {{.JavaClassName}} {
    {{range .Methods}}
    {{if not (or .Descriptor.IsStreamingClient .Descriptor.IsStreamingServer)}}
    {{.JavaMethod}};
    {{end}}
    {{end}}
  }
  {{end}}

  {{if or .Options.GenerateHelidonServer .Options.GenerateHelidonClient}}
  public static class Helidon {
    {{if .Options.GenerateHelidonClient}}
    public static class Client {
      {{range .ProtoFile.Services}}
      public static class {{.JavaClassName}} extends io.github.ngyewch.twirp.helidon.client.AbstractService implements {{$.JavaOuterClassName}}.{{.JavaClassName}} {
        private {{.JavaClassName}}(String baseUri, io.helidon.common.http.MediaType contentType) {
          super(baseUri, contentType);
        }

        public static {{$.JavaOuterClassName}}.{{.JavaClassName}} newProtobufClient(String baseUri) {
          return new {{.JavaClassName}}(baseUri, io.github.ngyewch.twirp.helidon.MediaTypes.PROTOBUF_MEDIA_TYPE);
        }

        public static {{$.JavaOuterClassName}}.{{.JavaClassName}} newJSONClient(String baseUri) {
          return new {{.JavaClassName}}(baseUri, io.github.ngyewch.twirp.helidon.MediaTypes.JSON_MEDIA_TYPE);
        }
        {{range .Methods}}
        {{if not (or .Descriptor.IsStreamingClient .Descriptor.IsStreamingServer)}}
        {{$requestType := (index .JavaMethod.Arguments 0).Type}}
        @Override
        public {{.JavaMethod.ReturnType}} {{.JavaMethod.Name}}({{$requestType}} input) {
          final {{.JavaMethod.ReturnType}}.Builder outputBuilder = {{.JavaMethod.ReturnType}}.newBuilder();
          doRequest("{{.TwirpPath}}", input, outputBuilder);
          return outputBuilder.build();
        }
        {{end}}
        {{end}}
      }
      {{end}}
    }
    {{end}}
    {{if .Options.GenerateHelidonServer}}
    public static class Server {
      {{range .ProtoFile.Services}}
      public static class {{.JavaClassName}} {
        public static void update(io.helidon.webserver.Routing.Rules rules, {{$.JavaOuterClassName}}.{{.JavaClassName}} service) {
          {{range .Methods}}
          {{if not (or .Descriptor.IsStreamingClient .Descriptor.IsStreamingServer)}}
          {{$requestType := (index .JavaMethod.Arguments 0).Type}}
          rules.post("{{.TwirpPath}}", (req, res) -> {
            final {{$requestType}}.Builder requestBuilder = {{$requestType}}.newBuilder();
            io.github.ngyewch.twirp.helidon.server.Handler.handleTwirp(req, res, requestBuilder, () -> service.{{.JavaMethod.Name}}(requestBuilder.build()));
          });
          {{end}}
          {{end}}
        }
      }
      {{end}}
    }
    {{end}}
  }
  {{end}}
}
